Yiyun Zhang(Benny)

Q1:
use mit-scheme, load file (load “q1.scm”)
I defined List 1: l1, List 2: l2
l1 has elements: (l1 "l1") (l2 "l2") (l3 "l3") (l4 "l4") (l5 "l5")
l2 has elements: (t1 "t1") (t2 "t2") (t3 "t3") (t4 "t4") (t5 "t5")
The first test for lookup is search “l1” in l1, it return pair of l1
The second test for lookup is search “l1” in l2, it return null pair
I defined the environment t as a combined list of l1 and l2
The first test for lookup-env is search “t1” in environment, it return pair of t1
The first test for lookup-env is search “t6” in environment, it return null pair
Output:
'(l1 "l1")
'()
'(t1 "t1")
'()

Q2:
4.4
use mit-scheme, load file (load “q2_4.4.scm”)
The evaluation for “and” and “or” is defined in the function (eval-and exp env) and (eval-or exp env).
To test the function, input the test codes in the input console:
(and true false)
(and true true)
(or true false)
(or true true)
(and true false true)
(and true true true)
(or true false true)
(or false false false)

The output should be:
(and true false) - #f
(and true true) - #t
(or true false) - #t
(or true true) - #t
(and true false true) - #f
(and true true true) - #t
(or true false true) - #t
(or false false false) - #f

4.9
use mit-scheme, load file (load “q2_4.9.scm”)
The iteration function is a “for” function.
After load the program, a test program can be input by the console:
(begin (define sum 0)
    (for i '(1 2 3)
        (set! sum (+ sum i)))
    sum)
It use the for loop to add the numbers to the sum.
The output should be the sum from 1 to 3 which is 6

4.11
use mit-scheme, load file (load "q2_4.11.scm")
To test the rewrite binding function(lookup-variable-value and make-frame)
After the load program use this program to the console input:
(lookup-variable-value 'a
                    (extend-environment '(a) '(20) the-empty-environment))
(make-frame '(a b c) '(1 2 3))
The output should be:
Value: 20 for lookup
Value 13: (((a . 1) (b . 2) (c . 3))) for make frame.

Q3:
I made a makefile to let it easier to use.
make run - can run the program with any input.
make test - can run the test created by me, first two should be success, the third on should be fail due to the wrong format
make view - can see the source code of cpp file
Output for make test:
./a.out 10011010011001
Parsing successful
./a.out 011001
Parsing successful
./a.out 10101
Invalid input or failed to parsing

For each question, there is a screenshot of the program output, the screenshots are attached in the folder.
