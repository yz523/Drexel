Yiyun Zhang
SE320
HW1 - Blackbox Testing

From the lecture,we learned that we should always start our testing with test-to pass using simple inputs, to ensure our basic functions are correct. Therefore, in each of following parts(techniques disscussed in the class), thre is a form that list the inputs of array and elemtent, and the rest is the description test-to-pass. There are two types of the test, one is check if the result is correct after the search under different input combinations, the other one is to check if the program handle the bad inputs correctly, in other words, make sure the program output the error messages instead of crashing.

======================================1. Equivalence Partitioning======================================
This part is the very basic tests, to show the binary search works correctly(return the correct position).
For those suituation that the element is not in the array, the program should output error messages.
Each function in this part test a specific input, which follows this form.
 -----------------------------------------------
|function         Array               Element   |
|   1        Single value             In Array  |
|   2        Single value           NOT In Array|
|   3   More than 1 value(even)   First In Array|
|   4   More than 1 value(even)    Last In Array|
|   5   More than 1 value(even)  Middle In Array|
|   6   More than 1 value(even)     Not In Array|
 -----------------------------------------------

function: testbinarysearch_1()
It is a simple test to test the correctness of my binary search.
It takes an integer array with single value in it and an integer element which is in the array.
It returns the index position of the element in array.

function: testbinarysearch_2()
It test the NoSuchElementException of my funtion.
It takes an integer array with single value in it and an integer element which is NOT in the array.
It throws an NoSuchElementException with error message "Can't find the element in this array"

function: testbinarysearch_3()
It is a simple test to test the correctness of my binary search.
It takes an integer array with more than one value and an integer element which is in the first position in the array.
It returns the first position of the array.

function: testbinarysearch_4()
It is a simple test to test the correctness of my binary search.
It takes an integer array with more than one value and an integer element which is in the last position in the array.
It returns the last position of the array.

function: testbinarysearch_5()
It is a simple test to test the correctness of my binary search.
It takes an integer array with more than one value and an integer element which is in the middle position in the array.
It returns the middle position of the array.

function: testbinarysearch_6()
It test the NoSuchElementException of my funtion.
It takes an integer array with more than one value and an integer element which is NOT in the array.
It throws an NoSuchElementException with error message "Can't find the element in this array"

======================================2. Boundary Value Analysis======================================
This part is to test the boundary values, in other words, bad inputs.
The program raise informative error message(exceptions) when a bad input happens instead of crashing, 
as assignment requirement described.
Each function in this part test a specific input, which follows this form.
 ----------------------------------------------------
|function         Array                 Element      |
|   7             empty               Not In Array   |
|   8             null                Not In Array   |
|   9        More than 1 value            null       |
|  10          odd number           First In Array   |
|  11          odd number             Mid In Array   |
|  12          odd number            Last In Array   |
|  13       More than 1 value     Integer.MAX_VALUE+1|
|        (without Integer.MAX_VALUE+1)               | 
|  14       More than 1 value     Integer.MAX_VALUE+1|
|        (with Integer.MAX_VALUE+1)                  | 
 ----------------------------------------------------

function: testbinarysearch_7()
It test the IllegalArgumentException of my funtion.
It takes an empty array and an integer element.
It throws an IllegalArgumentException with error message "Invalid input: array is empty."

function: testbinarysearch_8()
It test the NullPointerExceptionof my funtion.
It takes an null array and an integer element.
It throws an NullPointerExceptionof with error message "Invalid input: array is null

function: testbinarysearch_9()
It test the NullPointerExceptionof my funtion.
It takes an integer array and a null element.
It throws an NullPointerExceptionof with error message "Invalid input: element is null

function: testbinarysearch_10()
It test the boundary values(integer rounding) of the funtion.
It takes an integer array with odd number and an integer element which is in the first position in the array.
It returns the first position of the array.

function: testbinarysearch_11()
It test the boundary values(integer rounding) of the funtion.
It takes an integer array with odd number and an integer element which is in the middle position in the array.
It returns the middle position of the array.

function: testbinarysearch_12()
It test the boundary values(integer rounding) of the funtion.
It takes an integer array with odd number and an integer element which is in the last position in the array.
It returns the last position of the array.

function: testbinarysearch_13()
It test the boundary values(internal boundaries) of the funtion.
It takes an integer array without integer Integer.MAX_VALUE+1 and an integer element which is beyond the integer max value in java.
It throws an NoSuchElementException with error message "Can't find the element in this array"

function: testbinarysearch_14()
It test the boundary values(internal boundaries) of the funtion.
It takes an integer array with integer Integer.MAX_VALUE+1 and an integer element which is beyond the integer max value in java.
It still throws an NoSuchElementException with error message "Can't find the element in this array"

======================================3. Edge Cases for specific data types======================================
This part is the edge cases for integer types(since we only need to test our code with integers/numbers).
The test of 0, MIN_VALUE, MAX_Value are included.The special cases for floating point(float,double) is also included.
Since I can't directly get NaN, I let some integers divided by 0 to get NaN in the tests.
Each function in this part test a specific input, which follows this form.
 ----------------------------------------------------
|function         Array                 Element      |
|  15       More than 1 value     Integer.MIN_VALUE-1|
|        (without Integer.MIN_VALUE-1)               | 
|  16       More than 1 value     Integer.MIN_VALUE-1|
|        (with Integer.MIN_VALUE-1)                  |
|  17          without 0                    0        | 
|  18          include 0                    0        |
|  19          float                     double      |
|  20       More than 1 value             NaN        |
|  21          NaN                      In Array     |
 ----------------------------------------------------

function: testbinarysearch_15()
It test the boundary values(internal boundaries) of the funtion.
It takes an integer array without integer Integer.MIN_VALUE-1 and an integer element which is beyond the integer min value in java.
It throws an NoSuchElementException with error message "Can't find the element in this array"

function: testbinarysearch_16()
It test the boundary values(internal boundaries) of the funtion.
It takes an integer array with integer Integer.MIN_VALUE-1 and an integer element which is beyond the integer min value in java.
It return the correct index position of the element in the array.

function: testbinarysearch_17()
It test the boundary values(0) of the funtion.
It takes an integer array without 0 and an integer element 0.
It throws an NoSuchElementException with error message "Can't find the element in this array"

function: testbinarysearch_18()
It test the boundary values(0) of the funtion.
It takes an integer array with 0 and an integer element 0.
It return the correct index position of the element in the array.

function: testbinarysearch_19()
It test the boundary values(tricky cases for floating point (float, double)) of the funtion.
It takes an float array and an double element.
It throws an java.lang.Error with error message "Unresolved compilation problem:"

function: testbinarysearch_20()
It test the boundary values(NaN) of the funtion.
It takes an integer array and an NaN element.
It throws an java.lang.ArithmeticException with error message "/ by zero"

function: testbinarysearch_21()
It test the boundary values(NaN) of the funtion.
It takes an integer array with a NaN inside and an integer element.
It throws an java.lang.ArithmeticException with error message "/ by zero"
======================================4. State Transitions======================================
No test
======================================5. Decision Tables======================================
No test